# See https://www.php.net/manual/en/opcache.configuration.php for all available configuration options.
[opcache]
; Enable or disable opcache during docker build
opcache.enable=${OPCACHE_ENABLE}
opcache.enable_cli=${OPCACHE_ENABLE}

; The default is 64MB, this is set it to 192MB because we generally have Laravel to manage
opcache.memory_consumption=192

opcache.interned_strings_buffer=16

; Controls how many PHP files, at most, can be held in memory at once.
; It's important that your project has LESS FILES than whatever you set this at.
; A general Laravel/Symfony codebase has ~6000 files for example.
; You can run "find . -type f -print | grep php | wc -l" to quickly calculate the number of files in your codebase.
opcache.max_accelerated_files=7963

opcache.max_waster_percentage=20

; Toggle validate timestamps, useful for local development to set this high (1) and set low for production (0)
opcache.validate_timestamps=${OPCACHE_VALIDATE_TIMESTAMPS}

; Seconds between validation. This is ignored if validate_timestamps is set to 0
opcache.revalidate_freq=60

; A faster mechanism for calling the deconstructors in your code at the end of a single request to speed up the response
; and recycle php workers so they're ready for the next incoming request faster. Set it to 1 and turn it on.
opcache.fast_shutdown=1

; The opcache.jit directive accepts a 4-digit value to control the JIT behavior
; in the form of CRTO, and accepts following values for C, R, T, and O positions.
;
; C: CPU-specific Optimization Flags:
;   (0) Disable CPU-specific optimization.
;   (1) Enable use of AVX, if the CPU supports it.
;
; R: Register Allocation:
;   (0) Don't perform register allocation.
;   (1) Perform block-local register allocation.
;   (2) Perform global register allocation.
;
; T: Trigger:
;   (0) Compile all functions on script load.
;   (1) Compile all functions on first execution.
;   (2) Profile first request and compile the hottest functions afterwards.
;   (3) Profile on the fly and compile hot functions.
;   (4) Currently unused.
;   (5) Use tracing JIT. Profile on the fly and compile traces for hot code segments.
; O: Optimization Level
;   (0) No JIT.
;   (1) Minimal JIT (call standard VM handlers).
;   (2) Inline VM handlers.
;   (3) Use type inference.
;   (4) Use call graph.
;   (5) Optimize whole script.
opcache.jit=1255

; The opcache.jit_debug directive accepts a bit-mask value to toggle certain features.
; It currently accepts a value in the range of 1 (0b1) to 20 bits binary.
; A value of 1048576 represents the maximum level of debug output.
opcache.jit_debug=${OPCACHE_JIT_DEBUG}

; JIT memory buffer for PHP 8.x The default value 0, which effectively disables JIT.
; To enable and set a buffer size, set a positive value in bytes, or with standard PHP data size suffixes (M, G, etc.)
opcache.jit_buffer_size=256M
